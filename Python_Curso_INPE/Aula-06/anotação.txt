Operador +:

>>> "Gilberto" + "Ribeiro"
'GilbertoRibeiro'
>>> "Gilberto " + "Ribeiro"
'Gilberto Ribeiro'
>>> "Gilberto " + "Ribeiro " + "de " + "Queiroz"
'Gilberto Ribeiro de Queiroz'

outras funções que também juntam strings: str.join() e io.StringIO.

Operador *:

>>> "Gilberto" * 3
'GilbertoGilbertoGilberto'
>>> 4 * "Gilberto"
'GilbertoGilbertoGilbertoGilberto'
>>> -4 * "Gilberto"
''

Pertinencia in:

Cofere se na string se o que foi coloca antes do "in" aparece na string
ex:
>>> "i" in "Gilberto Ribeiro de Queiroz"
True
>>> "a" in "Gilberto Ribeiro de Queiroz"
False
>>> "Ri" in "Gilberto Ribeiro de Queiroz"
True
>>> "Rie" in "Gilberto Ribeiro de Queiroz"
False

Pertinencia not in:
Mesma funcionalidade do "in", mas devolve o valor oposto
ex:

>>> "i" not in "Gilberto Ribeiro de Queiroz"
False
>>> "a" not in "Gilberto Ribeiro de Queiroz"
True
>>> "Ri" not in "Gilberto Ribeiro de Queiroz"
False
>>> "Rie" not in "Gilberto Ribeiro de Queiroz"
True

Operador len():
retorna o número de caracteres da String
ex:

>>> len("Gilberto Ribeiro de Queiroz")
27
>>> len("")
0

Operador []:
retorna o caractere na posição solicitada
ex:

>>> "Gilberto Ribeiro de Queiroz"[3]
'b'
>>> "Gilberto Ribeiro de Queiroz"[0]
'G'
>>> "Gilberto Ribeiro de Queiroz"[-1]
'z'
>>> "Gilberto Ribeiro de Queiroz"[28]
IndexError: string index out of range

o primeiro elemento é o [0]

Operador [x,y]:
mesma função do "[]", mas retorna os caracteres da área mencionada
ex:

>>> "Gilberto Ribeiro de Queiroz"[0:3]
'Gil'
>>> "Gilberto Ribeiro de Queiroz"[:-24]
'Gil'
>>> "Gilberto Ribeiro de Queiroz"[9:]
'Ribeiro de Queiroz'
>>> "Gilberto Ribeiro de Queiroz"[:]
'Gilberto Ribeiro de Queiroz'

Operações:
a maior parte das operações se encontram em forma de metodo
Ex:
str.op(argumentos)
s.find(sub[, start[, end]])
ex:
>>> "Gilberto Ribeiro".find("rto")
5
>>> "Alberto Queiroz".find("rto")
4
>>> "Cassia Diniz".find("rto")
-1

-1 caso não encontre uma ocorrência

Operadores:
s.join(iterable) -> retorna a string concatenada
ex:
>>> "-".join( ("Gilberto", "Ribeiro", "de", "Queiroz") )
'Gilberto-Ribeiro-de-Queiroz'
>>> " ".join( ("Gilberto", "Ribeiro", "de", "Queiroz") )
'Gilberto Ribeiro de Queiroz'
>>> "".join( ("Gilberto", "Ribeiro", "de", "Queiroz") )
'GilbertoRibeirodeQueiroz'

s.split(sep=None, maxsplit=1 -> Retorna uma lista
ex:
>>> "Gilberto Ribeiro de Queiroz".split()
['Gilberto', 'Ribeiro', 'de', 'Queiroz']
>>> "Gilberto-Ribeiro-de-Queiroz".split("-")
['Gilberto', 'Ribeiro', 'de', 'Queiroz']
>>> "1,2,,3,".split(",")
['1', '2', '', '3', '']

s.replace(old, new[, count]) -> substitui toda ocorrencia do old pelo new
ex:
>>> "Gilberto Ribeiro de Queiroz".replace("i", "@")
'G@lberto R@be@ro de Que@roz'
>>> "Gilberto Ribeiro de Queiroz".replace("i", "@", 2)
'G@lberto R@beiro de Queiroz'

Outras Operações:

• str.isdigit():
Retorna True se todos os caracteres da string são dígitos, caso contrário, retorna False.

• str.islower():
Retorna True se todos os caracteres são minúsculos e exista pelo menos uma letra, caso 
contrário, retorna False.

• str.isupper():
Retorna True se todos os caracteres são maiúsculos e exista pelo menos uma letra, caso contrário, retorna False.

• str.lower():
•Retorna uma cópia da string com todos os caracteres em minúsculo.

• str.upper(): • Retorna uma cópia da string com todos os caracteres em maiúsculo.

links para consulta de ops:
https://docs.python.org/3/library/stdtypes.html

https://pyformat.info/

https://docs.python.org/3/library/string.html
